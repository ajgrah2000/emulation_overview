heading:|md
Brining The CPU Together
|

heading -> core

core:|`rust
 pub fn step(&mut self, debug: bool, realtime: bool) {
        if realtime {
            let in_ms: u64 = self.start_time.elapsed().expect("Error getting eplapsed").as_millis() as u64;
            if 1000 * self.clock.ticks / Constants::CLOCK_HZ as u64 > in_ms {
                let required_sleep = (1000 * self.clock.ticks / Constants::CLOCK_HZ as u64) - in_ms;
                thread::sleep(time::Duration::from_millis(required_sleep));
            }
        }

        let op_code = self.memory.read(&self.clock, self.pc_state.get_pc());

        if debug {
            print!(
                "cycles:{} 0x{:X} {:X} (0x{:X}) ",
                (self.clock.ticks.wrapping_sub(self.memory.stella.debug_clock())) / pc_state::PcState::CYCLES_TO_CLOCK as u64,
                op_code,
                self.pc_state.get_pc(),
                self.memory.read(&self.clock, self.pc_state.get_pc().wrapping_add(1))
            );
            println!("{}", self.pc_state);
        }

        instructions::Instruction::execute(op_code, &mut self.clock, &mut self.memory, &mut self.pc_state, &mut self.ports);
    }

`|
